// let rules = ref([
//   [
//     { type: "Давление", value: "Большое" },
//     { type: "Объем", value: "Большой" },
//     { type: "Температура", value: "Высокая" },
//   ],
//   [
//     { type: "Давление", value: "Низкое" },
//     { type: "Объем", value: "Большой" },
//     { type: "Температура", value: "Средняя" },
//   ],
//   [
//     { type: "Давление", value: "Большое" },
//     { type: "Объем", value: "Маленький" },
//     { type: "Температура", value: "Средняя" },
//   ],
// ]);



// rules.value.push(
//   [
//     { type: "Давление", value: "Большое" },
//     { type: "Объем", value: "Большой" },
//     { type: "Температура", value: "Высокая" },
//   ],
//   [
//     { type: "Давление", value: "Низкое" },
//     { type: "Объем", value: "Большой" },
//     { type: "Температура", value: "Средняя" },
//   ],
//   [
//     { type: "Давление", value: "Большое" },
//     { type: "Объем", value: "Маленький" },
//     { type: "Температура", value: "Средняя" },
//   ]
// );



// let definitionSets = ref([
//   { type: "Давление", set: [800, 830, 860, 900] },
//   { type: "Объем", set: [500, 520, 540, 560] },
//   { type: "Температура", set: [300, 350, 400] },
// ]);
// definitionSets.value.push(
//   { type: "Давление", set: [800, 830, 860, 900] },
//   { type: "Объем", set: [500, 520, 540, 560] },
//   { type: "Температура", set: [300, 350, 400] }
// );



// definitionSets.value.push(
//   { type: "Давление", set: [800, 830, 860, 900] },
//   { type: "Объем", set: [500, 520, 540, 560] },
//   { type: "Температура", set: [300, 350, 400] }
// );



// let arrayWithA = ref([
//   {
//     Давление: {
//       Большое: [0.4, 0.6, 0.8, 1],
//       Низкое: [1, 0.9, 0.6, 0.4],
//     },
//   },
//   {
//     Объем: {
//       Большой: [0, 0.3, 0.7, 1],
//       Маленький: [1, 0.8, 0.6, 0.2],
//     },
//   },
//   {
//     Температура: {
//       Высокая: [0.1, 0.5, 1],
//       Средняя: [0.5, 1, 0.5],
//     },
//   },
// ]);



// arrayWithA.value.push(
//   {
//     Давление: {
//       Большое: [0.4, 0.6, 0.8, 1],
//       Низкое: [1, 0.9, 0.6, 0.4],
//     },
//   },
//   {
//     Объем: {
//       Большой: [0, 0.3, 0.7, 1],
//       Маленький: [1, 0.8, 0.6, 0.2],
//     },
//   },
//   {
//     Температура: {
//       Высокая: [0.1, 0.5, 1],
//       Средняя: [0.5, 1, 0.5],
//     },
//   }
// );



// let arrayWithA2 = ref([
//   {
//     Давление: {
//       Среднее: [0.5, 0.8, 0.9, 0.5],
//     },
//   },
//   {
//     Объем: {
//       Достаточно_маленький: [0.9, 0.5, 0.3, 0],
//     },
//   },
// ]);



// arrayWithA2.value.push(
//   {
//     Давление: {
//       Среднее: [0.5, 0.8, 0.9, 0.5],
//     },
//   },
//   {
//     Объем: {
//       Достаточно_маленький: [0.9, 0.5, 0.3, 0],
//     },
//   }
// );




//для нескольких правил (агрегация индивидуальных выходов (композиционное правило с первоначальным вычислением индивидуальных выходов))
// let arrayWithR = [];
// arrayWithR.push(fuzzyMamdaniImplication([0.4, 0.6, 0.8, 1], [0.5, 1, 0.5]));
// arrayWithR.push(fuzzyMamdaniImplication([1, 0.9, 0.6, 0.4], [1, 0.4, 0.1]));
// let A2 = [0.5, 0.8, 0.9, 0.5];
// let arrayWitnB = [];
// arrayWitnB.push(maxMinComposition(arrayWithR[0], A2));
// arrayWitnB.push(maxMinComposition(arrayWithR[1], A2));
// let B = aggB(arrayWitnB);

//для нескольких правил (агрегация правил (композиционное правило с первоначальной агрегацией правил.))
// let arrayWithR = [];
// arrayWithR.push(fuzzyMamdaniImplication([0.4, 0.6, 0.8, 1], [0.5, 1, 0.5]));
// arrayWithR.push(fuzzyMamdaniImplication([1, 0.9, 0.6, 0.4], [1, 0.4, 0.1]));
// let A2 = [0.5, 0.8, 0.9, 0.5];
// let R = aggR(arrayWithR);
// let B2 = maxMinComposition(R, A2);